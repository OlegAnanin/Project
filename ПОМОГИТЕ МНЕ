from tkinter import *
from tkinter.ttk import Combobox
import random
import csv

def calculate_kbzu():
    try:
        weight = float(weight_entry.get())
        height = float(height_entry.get())
        age = float(age_entry.get())
        gender = gender_combo.get()
        activity_level = activity_combo.get()
        goal = goal_combo.get()

        if gender == 'Мужской':
            bmr = 10 * weight + 6.25 * height - 5 * age + 5
        elif gender == 'Женский':
            bmr = 10 * weight + 6.25 * height - 5 * age - 161

        activity_multipliers = {'Малоподвижный': 1.2, 'Тренировки 1-3 раза в неделю': 1.375,
                                'Тренировки 3-5 раз в неделю': 1.55, 'Высокие нагрузки каждый день': 1.725,
                                'Экстремальные нагрузки': 1.9}

        activity = activity_multipliers.get(activity_level, 1.2)

        if goal == "набрать":
            total_calories = bmr * activity * 1.2
        if goal == "сбросить":
            total_calories = bmr * activity * 0.85
        elif goal == "сохранить":
            total_calories = bmr * activity
        total_calories = round(total_calories)

        result_text.set(f"Количество Ккал: {total_calories:.2f}\n"
                        f"Суточная норма белка: {round(total_calories * 0.3 / 4)} грамм\n"
                        f"Суточная норма жиров: {round(total_calories * 0.3 / 9)} грамм\n"
                        f"Суточная норма углеводов: {round(total_calories * 0.4 / 4)} грамм")

        breakfast_text.set(f"На завтрак: "
                           f"Ккал: {round(total_calories * 0.3)}\n"
                           f"Белки: {round(total_calories * 0.09 / 4)}\n"
                           f"Жиры: {round(total_calories * 0.09 / 9)}\n"
                           f"Углеводы: {round(total_calories * 0.12 / 4)}")

        snack_text.set(f"Перекус: "
                       f"Ккал: {round(total_calories * 0.15)}\n"
                       f"Белки: {round(total_calories * 0.045 / 4)}\n"
                       f"Жиры: {round(total_calories * 0.045 / 9)}\n"
                       f"Углеводы: {round(total_calories * 0.06 / 4)}")

        lunch_text.set(f"На обед: "
                       f"Ккал: {round(total_calories * 0.35)}\n"
                       f"Белки: {round(total_calories * 0.105 / 4)}\n"
                       f"Жиры: {round(total_calories * 0.105 / 9)}\n"
                       f"Углеводы: {round(total_calories * 0.14 / 4)}")

        dinner_text.set(f"На ужин: "
                        f"Ккал: {round(total_calories * 0.25)}\n"
                        f"Белки: {round(total_calories * 0.075 / 4)}\n"
                        f"Жиры: {round(total_calories * 0.75 / 9)}\n"
                        f"Углеводы: {round(total_calories * 0.1 / 4)}")

    except ValueError:
        result_text.set("Введите корректные числовые значения")

def meals_file(filename):
    meals = []
    with open(filename, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            meals.append({
                "name": row['Продукт'],
                "calories": float(row['Калорийность']),
                "proteins": float(row["Белки"]),
                "fats": float(row['Жиры']),
                'carbs': float(row['Углеводы'])
            })
    return meals

def create_plan():
    try:
        meals = meals_file('meals.txt')
    except Exception as e:
        print(f"An error occurred: {e}")

    try:
        total_calories = result_text.get().split("\n")[0].split(":")[1].strip()
        calories = {'breakfast': round(float(total_calories) * 0.3),
                    'lunch': round(float(total_calories) * 0.35),
                    'dinner': round(float(total_calories) * 0.25),
                    'snack': round(float(total_calories) * 0.15)}
        proteins = {'breakfast': round(float(total_calories) * 0.09 / 4),
                    'lunch': round(float(total_calories) * 0.105 / 4),
                    'dinner': round(float(total_calories) * 0.075 / 4),
                    'snack': round(float(total_calories) * 0.045 / 4)}
        fats = {'breakfast': round(float(total_calories) * 0.09 / 9),
                'lunch': round(float(total_calories) * 0.105 / 9),
                'dinner': round(float(total_calories) * 0.75 / 9),
                'snack': round(float(total_calories) * 0.045 / 9)}
        carbs = {'breakfast': round(float(total_calories) * 0.12 / 4),
                 'lunch': round(float(total_calories) * 0.14 / 4),
                 'dinner': round(float(total_calories) * 0.1 / 4),
                 'snack': round(float(total_calories) * 0.06 / 4)}

        breakfast_options = []
        remaining_meals = meals.copy()

        total_calories_breakfast = 0
        total_proteins_breakfast = 0
        total_fats_breakfast = 0
        total_carbs_breakfast = 0

        while (
                total_calories_breakfast < calories['breakfast'] and
                total_proteins_breakfast < proteins['breakfast'] and
                total_fats_breakfast < fats['breakfast'] and
                total_carbs_breakfast < carbs['breakfast'] and
                remaining_meals
        ):
            meal = random.choice(remaining_meals)
            if (
                    total_calories_breakfast + meal['calories'] <= calories['breakfast'] and
                    total_proteins_breakfast + meal['proteins'] <= proteins['breakfast'] and
                    total_fats_breakfast + meal['fats'] <= fats['breakfast'] and
                    total_carbs_breakfast + meal['carbs'] <= carbs['breakfast']
            ):
                breakfast_options.append(meal)
                total_calories_breakfast += meal['calories']
                total_proteins_breakfast += meal['proteins']
                total_fats_breakfast += meal['fats']
                total_carbs_breakfast += meal['carbs']
                remaining_meals.remove(meal)

        snack_options = []
        remaining_meals = meals.copy()

        total_calories_snack = 0
        total_proteins_snack = 0
        total_fats_snack = 0
        total_carbs_snack = 0

        while (
                total_calories_snack < calories['snack'] and
                total_proteins_snack < proteins['snack'] and
                total_fats_snack < fats['snack'] and
                total_carbs_snack < carbs['snack'] and
                remaining_meals
        ):
            meal = random.choice(remaining_meals)
            if (
                    total_calories_snack + meal['calories'] <= calories['snack'] and
                    total_proteins_snack + meal['proteins'] <= proteins['snack'] and
                    total_fats_snack + meal['fats'] <= fats['snack'] and
                    total_carbs_snack + meal['carbs'] <= carbs['snack']
            ):
                snack_options.append(meal)
                total_calories_snack += meal['calories']
                total_proteins_snack += meal['proteins']
                total_fats_snack += meal['fats']
                total_carbs_snack += meal['carbs']
                remaining_meals.remove(meal)

        lunch_options = []
        remaining_meals = meals.copy()

        total_calories_lunch = 0
        total_proteins_lunch = 0
        total_fats_lunch = 0
        total_carbs_lunch = 0

        while (
                total_calories_lunch < calories['lunch'] and
                total_proteins_lunch < proteins['lunch'] and
                total_fats_lunch < fats['lunch'] and
                total_carbs_lunch < carbs['lunch'] and
                remaining_meals
        ):
            meal = random.choice(remaining_meals)
            if (
                    total_calories_lunch + meal['calories'] <= calories['lunch'] and
                    total_proteins_lunch + meal['proteins'] <= proteins['lunch'] and
                    total_fats_lunch + meal['fats'] <= fats['lunch'] and
                    total_carbs_lunch + meal['carbs'] <= carbs['lunch']
            ):
                lunch_options.append(meal)
                total_calories_lunch += meal['calories']
                total_proteins_lunch += meal['proteins']
                total_fats_lunch += meal['fats']
                total_carbs_lunch += meal['carbs']
                remaining_meals.remove(meal)

        dinner_options = []
        remaining_meals = meals.copy()

        total_calories_dinner = 0
        total_proteins_dinner = 0
        total_fats_dinner = 0
        total_carbs_dinner = 0

        while (
                total_calories_dinner < calories['dinner'] and
                total_proteins_dinner < proteins['dinner'] and
                total_fats_dinner < fats['dinner'] and
                total_carbs_dinner < carbs['dinner'] and
                remaining_meals
        ):
            meal = random.choice(remaining_meals)
            if (
                    total_calories_dinner + meal['calories'] <= calories['dinner'] and
                    total_proteins_dinner + meal['proteins'] <= proteins['dinner'] and
                    total_fats_dinner + meal['fats'] <= fats['dinner'] and
                    total_carbs_dinner + meal['carbs'] <= carbs['dinner']
            ):
                dinner_options.append(meal)
                total_calories_dinner += meal['calories']
                total_proteins_dinner += meal['proteins']
                total_fats_dinner += meal['fats']
                total_carbs_dinner += meal['carbs']
                remaining_meals.remove(meal)

        # Отображаем результаты выбора блюд
        display_results(breakfast_options, 'Завтрак:', breakfast_text)
        display_results(snack_options, 'Перекус:', snack_text)
        display_results(lunch_options, 'Обед:', lunch_text)
        display_results(dinner_options, 'Ужин:', dinner_text)

    except ValueError:
        result_text.set("Введите корректные числовые значения")

def display_results(meals_list, meal_type_label, meal_text_variable):
    meal_text_variable.set(meal_type_label)
    for meal in meals_list:
        meal_text_variable.set(f"{meal_text_variable.get()}\n{meal['name']}")

# Создаем основное окно
window = Tk()
window.geometry('400x400')  # Размер окна
window.title('Расчет КБЖУ')

# Виджеты для ввода данных
weight_label = Label(window, text="Вес (кг):")
weight_label.grid(column=0, row=0)
weight_entry = Entry(window, width=10)
weight_entry.grid(column=1, row=0)

height_label = Label(window, text="Рост (см):")
height_label.grid(column=0, row=1)
height_entry = Entry(window, width=10)
height_entry.grid(column=1, row=1)

age_label = Label(window, text="Возраст:")
age_label.grid(column=0, row=2)
age_entry = Entry(window, width=10)
age_entry.grid(column=1, row=2)

gender_label = Label(window, text="Пол:")
gender_label.grid(column=0, row=3)
gender_combo = Combobox(window, values=("Мужской", "Женский"))
gender_combo.current(0)
gender_combo.grid(column=1, row=3)

activity_label = Label(window, text="Уровень активности:")
activity_label.grid(column=0, row=4)
activity_combo = Combobox(window, values=(
    "Малоподвижный", "Тренировки 1-3 раза в неделю", "Тренировки 3-5 раз в неделю", "Высокие нагрузки каждый день",
    "Экстремальные нагрузки"))
activity_combo.current(0)
activity
