from tkinter import *
from tkinter.ttk import Combobox

def kbzu():
    def calculate_kbzu():
        try:
            weight = float(weight_entry.get())
            height = float(height_entry.get())
            age = float(age_entry.get())
            gender = gender_combo.get()
            activity_level = activity_combo.get()
            goal = goal_combo.get()

            if gender == 'Мужской':
                bmr = 10 * weight + 6.25 * height - 5 * age + 5
            elif gender == 'Женский':
                bmr = 10 * weight + 6.25 * height - 5 * age - 161

            activity_multipliers = {'Малоподвижный': 1.2, 'Тренировки 1-3 раза в неделю': 1.375,
                                    'Тренировки 3-5 раз в неделю': 1.55, 'Высокие нагрузки каждый день': 1.725,
                                    'Экстремальные нагрузки': 1.9}

            activity = activity_multipliers.get(activity_level, 1.2)  # По умолчанию устанавливаем малоподвижный уровень активности
            
            
            if goal == "набрать":
                total_calories = bmr * activity * 1.2
            if goal == "сбросить":
                total_calories = bmr * activity * 0.85
            elif goal == "сохранить":
                total_calories = bmr * activity 
            total_calories = round(total_calories)

            result_text.set(f"Количество Ккал: {total_calories:.2f}\n"
                            f"Суточная норма белка: {round(total_calories * 0.3 / 4)} грамм\n"
                            f"Суточная норма жиров: {round(total_calories * 0.3 / 9)} грамм\n"
                            f"Суточная норма углеводов: {round(total_calories * 0.4 / 4)} грамм")

            breakfast_text.set(f"На завтрак: "
                               f"Ккал: {round(total_calories*0.3)}\n"
                               f"Белки: {round(total_calories * 0.09 / 4)}\n"
                               f"Жиры: {round(total_calories * 0.09 / 9)}\n"
                               f"Углеводы: {round(total_calories * 0.12 / 4)}")

            snack_text.set(f"Перекус: "
                               f"Ккал: {round(total_calories*0.15)}\n"
                               f"Белки: {round(total_calories * 0.045 / 4)}\n"
                               f"Жиры: {round(total_calories * 0.045 / 9)}\n"
                               f"Углеводы: {round(total_calories * 0.06 / 4)}")

            lunch_text.set(f"На обед: "
                               f"Ккал: {round(total_calories*0.35)}\n"
                               f"Белки: {round(total_calories * 0.105 / 4)}\n"
                               f"Жиры: {round(total_calories * 0.105 / 9)}\n"
                               f"Углеводы: {round(total_calories * 0.14 / 4)}")

            dinner_text.set(f"На ужин: "
                               f"Ккал: {round(total_calories*0.25)}\n"
                               f"Белки: {round(total_calories * 0.075 / 4)}\n"
                               f"Жиры: {round(total_calories * 0.75 / 9)}\n"
                               f"Углеводы: {round(total_calories * 0.1 / 4)}")
            

        except ValueError:
            result_text.set("Введите корректные числовые значения")

    # Создаем основное окно
    window = Tk()
    window.geometry('400x400')  # Размер окна
    window.title('Расчет КБЖУ')

    # Виджеты для ввода данных

    # Вес
    weight_label = Label(window, text="Вес (кг):")
    weight_label.grid(column=0, row=0)
    weight_entry = Entry(window, width=10)
    weight_entry.grid(column=1, row=0)

    # Рост
    height_label = Label(window, text="Рост (см):")
    height_label.grid(column=0, row=1)
    height_entry = Entry(window, width=10)
    height_entry.grid(column=1, row=1)

    # Возраст
    age_label = Label(window, text="Возраст:")
    age_label.grid(column=0, row=2)
    age_entry = Entry(window, width=10)
    age_entry.grid(column=1, row=2)

    # Пол
    gender_label = Label(window, text="Пол:")
    gender_label.grid(column=0, row=3)
    gender_combo = Combobox(window, values=("Мужской", "Женский"))
    gender_combo.current(0)
    gender_combo.grid(column=1, row=3)

    # Уровень активности
    activity_label = Label(window, text="Уровень активности:")
    activity_label.grid(column=0, row=4)
    activity_combo = Combobox(window, values=("Малоподвижный", "Тренировки 1-3 раза в неделю", "Тренировки 3-5 раз в неделю","Высокие нагрузки каждый день", "Экстремальные нагрузки"))
    activity_combo.current(0)
    activity_combo.grid(column=1, row=4)

    # Цель
    goal_label = Label(window, text="Цель:")
    goal_label.grid(column=0, row=7)
    goal_combo = Combobox(window, values=("сбросить", "набрать","сохранить"))
    goal_combo.current(0)
    goal_combo.grid(column=1, row=7)

    # Кнопка для расчета
    calculate_button = Button(window, text="Рассчитать", command=calculate_kbzu)
    calculate_button.grid(column=0, row=8, columnspan=1)

    # Кнопка для составления плана
    plan_button = Button(window, text="состваить план", command=print(12310))
    plan_button.grid(column=1, row=8, columnspan=2)
  
    # Результаты расчета
    result_text = StringVar()
    result_label = Label(window, textvariable=result_text)
    result_label.grid(column=0, row=9, columnspan=2)

    # КБЖУ на завтрак
    breakfast_text = StringVar()
    breakfast_label = Label(window, textvariable=breakfast_text)
    breakfast_label.grid(column=0, row=10, columnspan=1)

    # КБЖУ перекус
    snack_text = StringVar()
    snack_label = Label(window, textvariable=snack_text)
    snack_label.grid(column=0, row=11, columnspan=1)

    # КБЖУ на обед
    lunch_text = StringVar()
    lunch_label = Label(window, textvariable=lunch_text)
    lunch_label.grid(column=1, row=10, columnspan=2)

    # КБЖУ на ужин
    dinner_text = StringVar()
    dinner_label = Label(window, textvariable=dinner_text)
    dinner_label.grid(column=1, row=11, columnspan=2)


    window.mainloop()

def suggest_meals(meals, calories, proteins, fats, carbs):
    breakfast = []
    lunch = []
    dinner = []
    snack = []

    for meal in meals:
        if meal['calories'] <= calories['breakfast'] and meal['proteins'] <= proteins['breakfast'] and meal['fats'] <= fats['breakfast'] and meal['carbs'] <= carbs['breakfast']:
            breakfast.append(meal)

    print("Breakfast options:")
    for meal in breakfast:
        print(meal['name'])

    if len(breakfast) == 0:
        print("No breakfast options available.")

    while True:
        total_calories = 0
        total_proteins = 0
        total_fats = 0
        total_carbs = 0

        for meal in breakfast:
            total_calories += meal['calories']
            total_proteins += meal['proteins']
            total_fats += meal['fats']
            total_carbs += meal['carbs']

        if total_calories >= calories['breakfast'] and total_proteins >= proteins['breakfast'] and total_fats >= fats['breakfast'] and total_carbs >= carbs['breakfast']:
            break

        print("You need to add more food to your breakfast.")
        print("Here are some options:")
        for meal in meals:
            if meal not in breakfast and meal['calories'] <= calories['breakfast'] - total_calories and meal['proteins'] <= proteins['breakfast'] - total_proteins and meal['fats'] <= fats['breakfast'] - total_fats and meal['carbs'] <= carbs['breakfast'] - total_carbs:
                print(meal['name'])

        meal_name = input("Enter the name of the meal you want to add: ")
        for meal in meals:
            if meal['name'] == meal_name:
                breakfast.append(meal)
                break

    print("Your breakfast is complete!")
    print("Here are your options for lunch:")
    for meal in meals:
        if meal['calories'] <= calories['lunch'] and meal['proteins'] <= proteins['lunch'] and meal['fats'] <= fats['lunch'] and meal['carbs'] <= carbs['lunch']:
            lunch.append(meal)
            print(meal['name'])

    print("Here are your options for dinner:")
    for meal in meals:
        if meal['calories'] <= calories['dinner'] and meal['proteins'] <= proteins['dinner'] and meal['fats'] <= fats['dinner'] and meal['carbs'] <= carbs['dinner']:
            dinner.append(meal)
            print(meal['name'])

    print("Here are your options for snacks:")
    for meal in meals:
        if meal['calories'] <= calories['snack'] and meal['proteins'] <= proteins['snack'] and meal['fats'] <= fats['snack'] and meal['carbs'] <= carbs['snack']:
            snack.append(meal)
            print(meal['name'])
