from tkinter import *
from tkinter.ttk import Combobox
import random
import csv

def calculate_kbzu():
    try:
        weight = float(weight_entry.get())
        height = float(height_entry.get())
        age = float(age_entry.get())
        gender = gender_combo.get()
        activity_level = activity_combo.get()
        goal = goal_combo.get()

        if gender == 'Мужской':
            bmr = 10 * weight + 6.25 * height - 5 * age + 5
        elif gender == 'Женский':
            bmr = 10 * weight + 6.25 * height - 5 * age - 161

        activity_multipliers = {'Малоподвижный': 1.2, 'Тренировки 1-3 раза в неделю': 1.375,
                                'Тренировки 3-5 раз в неделю': 1.55, 'Высокие нагрузки каждый день': 1.725,
                                'Экстремальные нагрузки': 1.9}

        activity = activity_multipliers.get(activity_level, 1.2)

        if goal == "набрать":
            total_calories = bmr * activity * 1.2
        if goal == "сбросить":
            total_calories = bmr * activity * 0.85
        elif goal == "сохранить":
            total_calories = bmr * activity
        total_calories = round(total_calories)

        result_text.set(f"Количество Ккал: {total_calories:.2f}\n"
                        f"Суточная норма белка: {round(total_calories * 0.3 / 4)} грамм\n"
                        f"Суточная норма жиров: {round(total_calories * 0.3 / 9)} грамм\n"
                        f"Суточная норма углеводов: {round(total_calories * 0.4 / 4)} грамм")

        breakfast_text.set(f"На завтрак: "
                           f"Ккал: {round(total_calories * 0.3)}\n"
                           f"Белки: {round(total_calories * 0.09 / 4)}\n"
                           f"Жиры: {round(total_calories * 0.09 / 9)}\n"
                           f"Углеводы: {round(total_calories * 0.12 / 4)}")

        snack_text.set(f"Перекус: "
                       f"Ккал: {round(total_calories * 0.15)}\n"
                       f"Белки: {round(total_calories * 0.045 / 4)}\n"
                       f"Жиры: {round(total_calories * 0.045 / 9)}\n"
                       f"Углеводы: {round(total_calories * 0.06 / 4)}")

        lunch_text.set(f"На обед: "
                       f"Ккал: {round(total_calories * 0.35)}\n"
                       f"Белки: {round(total_calories * 0.105 / 4)}\n"
                       f"Жиры: {round(total_calories * 0.105 / 9)}\n"
                       f"Углеводы: {round(total_calories * 0.14 / 4)}")

        dinner_text.set(f"На ужин: "
                        f"Ккал: {round(total_calories * 0.25)}\n"
                        f"Белки: {round(total_calories * 0.075 / 4)}\n"
                        f"Жиры: {round(total_calories * 0.75 / 9)}\n"
                        f"Углеводы: {round(total_calories * 0.1 / 4)}")

    except ValueError:
        result_text.set("Введите корректные числовые значения")

def meals_file(filename):
    meals = []
    with open(filename, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            meals.append({
                "name": row['Продукт'],
                "calories": float(row['Калорийность']),
                "proteins": float(row["Белки"]),
                "fats": float(row['Жиры']),
                'carbs': float(row['Углеводы'])
            })
    return meals

def create_plan():
    try:
        meals = meals_file('meals.txt')
    except Exception as e:
        print(f"An error occurred: {e}")

    try:
        total_calories = result_text.get().split("\n")[0].split(":")[1].strip()
        calories = {'breakfast': round(float(total_calories) * 0.3),
                    'lunch': round(float(total_calories) * 0.35),
                    'dinner': round(float(total_calories) * 0.25),
                    'snack': round(float(total_calories) * 0.15)}
        proteins = {'breakfast': round(float(total_calories) * 0.09 / 4),
                    'lunch': round(float(total_calories) * 0.105 / 4),
                    'dinner': round(float(total_calories) * 0.075 / 4),
                    'snack': round(float(total_calories) * 0.045 / 4)}
        fats = {'breakfast': round(float(total_calories) * 0.09 / 9),
                'lunch': round(float(total_calories) * 0.105 / 9),
                'dinner': round(float(total_calories) * 0.75 / 9),
                'snack': round(float(total_calories) * 0.045 / 9)}
        carbs = {'breakfast': round(float(total_calories) * 0.12 / 4),
                 'lunch': round(float(total_calories) * 0.14 / 4),
                 'dinner': round(float(total_calories) * 0.1 / 4),
                 'snack': round(float(total_calories) * 0.06 / 4)}

        breakfast_options = get_meal_options(meals, calories['breakfast'], proteins['breakfast'],
                                             fats['breakfast'], carbs['breakfast'])
        snack_options = get_meal_options(meals, calories['snack'], proteins['snack'],
                                         fats['snack'], carbs['snack'])
        lunch_options = get_meal_options(meals, calories['lunch'], proteins['lunch'],
                                         fats['lunch'], carbs['lunch'])
        dinner_options = get_meal_options(meals, calories['dinner'], proteins['dinner'],
                                          fats['dinner'], carbs['dinner'])

        display_results(breakfast_options, 'Завтрак:', breakfast_text)
        display_results(snack_options, 'Перекус:', snack_text)
        display_results(lunch_options, 'Обед:', lunch_text)
        display_results(dinner_options, 'Ужин:', dinner_text)

    except ValueError:
        result_text.set("Введите корректные числовые значения")

def get_meal_options(meals, target_calories, target_proteins, target_fats, target_carbs):
    meal_options = []
    remaining_meals = meals.copy()

    total_calories_meal = 0
    total_proteins_meal = 0
    total_fats_meal = 0
    total_carbs_meal = 0

    while (
            total_calories_meal < target_calories and
            total_proteins_meal < target_proteins and
            total_fats_meal < target_fats and
            total_carbs_meal < target_carbs and
            remaining_meals
    ):
        meal = random.choice(remaining_meals)
        if (
                total_calories_meal + meal['calories'] <= target_calories and
                total_proteins_meal + meal['proteins'] <= target_proteins and
                total_fats_meal + meal['fats'] <= target_fats and
                total_carbs_meal + meal['carbs'] <= target_carbs
        ):
            meal_options.append(meal)
            total_calories_meal += meal['calories']
            total_proteins_meal += meal['proteins']
            total_fats_meal += meal['fats']
            total_carbs_meal += meal['carbs']
            remaining_meals.remove(meal)

    return meal_options

def display_results(meals_list, meal_type_label, meal_text_variable):
    meal_text_variable.set(meal_type_label)
    for meal in meals_list:
        meal_text_variable.set(f"{meal_text_variable.get()}\n{meal['name']}")

# Create the main window
window = Tk()
window.geometry('400x400')  # Window size
window.title('Calculation of BZHU')

# Widgets for data input
weight_label = Label(window, text="Weight (kg):")
weight_label.grid(column=0, row=0)
weight_entry = Entry(window, width=10)
weight_entry.grid(column=1, row=0)

height_label = Label(window, text="Height (cm):")
height_label.grid(column=0, row=1)
height_entry = Entry(window, width=10)
height_entry.grid(column=1, row=1)

age_label = Label(window, text="Age:")
age_label.grid(column=0, row=2)
age_entry = Entry(window, width=10)
age_entry.grid(column=1, row=2)

gender_label = Label(window, text="Gender:")
gender_label.grid(column=0, row=3)
gender_combo = Combobox(window, values=("Male", "Female"))
gender_combo.current(0)
gender_combo.grid(column=1, row=3)

activity_label = Label(window, text="Activity level:")
activity_label.grid(column=0, row=4)
activity_combo = Combobox(window, values=(
    "Sedentary", "Exercise 1-3 times per week", "Exercise 3-5 times per week", "High activity every day",
    "Extreme activity"))
activity_combo.current(0)
activity_combo.grid(column=1, row=4)

goal_label = Label(window, text="Goal:")
goal_label.grid(column=0, row=5)
goal_combo = Combobox(window, values=("Lose weight", "Gain weight", "Maintain weight"))
goal_combo.current(0)
goal_combo.grid(column=1, row=5)

# Results of the calculation
result_text = StringVar()
result_label = Label(window, textvariable=result_text)
result_label.grid(column=0, row=7, columnspan=2)

# BZHU for breakfast
breakfast_text = StringVar()
breakfast_label = Label(window, textvariable=breakfast_text)
breakfast_label.grid(column=0, row=9, columnspan=2)

# Snack BZHU
snack_text = StringVar()
snack_label = Label(window, textvariable=snack_text)
snack_label.grid(column=0, row=10, columnspan=2)

# BZHU for lunch
lunch_text = StringVar()
lunch_label = Label(window, textvariable=lunch_text)
lunch_label.grid(column=0, row=11, columnspan=2)

# BZHU for dinner
dinner_text = StringVar()
dinner_label = Label(window, textvariable=dinner_text)
dinner_label.grid(column=0, row=12, columnspan=2)

# Buttons
calculate_button = Button(window, text="Calculate", command=calculate_kbzu)
calculate_button.grid(column=0, row=6, columnspan=2)

plan_button = Button(window, text="Generate Plan", command=create_plan)
plan_button.grid(column=0, row=13, columnspan=2)

# Run the Tkinter event loop
window.mainloop()
